generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  securityToken String    @unique
  fullName      String
  deviceId      String
  deviceType    String
  deviceName    String
  email         String    @unique
  password      String
  dob           String
  mobileNumber  String
  isVerified    Boolean   @default(false)
  hashedOtp     String?
  otpExpiresAt  DateTime?
  isBanned      Boolean   @default(false)
  profilePhoto  String
  gender        String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  passwordReset PasswordReset?
  vehicles      Vehicle[]
  rides         Ride[]
  UserRide      UserRide[]
  StopOver      StopOver[]
}

model PasswordReset {
  id                  String    @id @default(uuid())
  resetToken          String?
  hashedOtp           String
  otpExpiresAt        DateTime
  resetTokenExpiresAt DateTime?
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([otpExpiresAt])
}

model Vehicle {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand  String
  model  String
  color  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rides     Ride[]
}

model Ride {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleId     String
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  from          String
  fromLat       String
  fromLong      String
  to            String
  toLat         String
  toLong        String
  date          String
  time          String
  noOfSeats     Int
  pricePerSeat  Int
  summary       String?
  remainingSeat Int
  isCompleted   Boolean   @default(false)
  isCancelled   Boolean   @default(false)
  cancelledAt   DateTime?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRide  UserRide[]
  StopOver  StopOver[]
}

model UserRide {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rideId    String
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StopOver {
  id        String   @id @default(uuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rideId    String
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
